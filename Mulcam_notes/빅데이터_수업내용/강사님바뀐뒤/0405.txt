0405

파이썬 설치 후
C:\Users\student\AppData\Local\Programs\Python\Python35;
를 환경변수 Path에 추가
pip를 쓸려면 
C:\Users\student\AppData\Local\Programs\Python\Python35\Scripts;
도 추가해야함



pycharm설치


python 함수 설명
dir()함수
내가 쓸 수 있는 이름들 모두 보여줌
현재 배당되어있는 이름 공간을 보고싶을 때 쓰자

pycharm
파일 - 세팅즈 - 에디터 - 파일 인코딩(안에 모든걸 UTF-8로 변경)

파이썬 명령어를 모아서 저장해 둔 것을 파이썬 스크립트 혹은 모듈이라고 부른다.
모듈? 
함수는 명령어를 모아서 이름을 붙여둔 것, 명령어들을 모아둔 데이터를 메모리에 생성하고 거기에 이름을 붙여둔 것
모듈은 파이썬 명령어들을 모아서 저장해 둔 것

파이썬에서는 이름공간만 있지 변수 함수같은 구분이 있지는 않다. 같은 이름을 변수에 붙이고 함수에 붙이고 하면 그 때마다 이름이 지정하는 것이 다름
데이터가 먼저 만들어지고 그 다음에 이름에 들어간다.

print = 3 이라고 해버리면
print()은 실행되지 않음
print라는 이름 공간이 함수가 아니라 숫자를 보고 있기 때문
hello world
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'a']
what???
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'b', 'py01']
모듈은 자신의 이름공간을 가진다. 그래서 이걸 덮어씌우면 안됩니다.

***데이터의 타입***

정수(정수값이 크면 클수록 큰 공간을 할당하므로 숫자 크기에 제약이 없다)
복소수도 표현이 가능하다
문자는 문자나 문자열을 구분하지 않는다.
진리값은 True False


***조건문

조건문은 들여쓰기로 구분

age = 18
if age > 20: 
    print('다 컸습니다.')
print('난 조건이랑 상관없어')

인 경우에는 조건문이랑 print('난 조건이랑 상관없어')는 상관없음

age = 18
if age > 20: 
    print('다 컸습니다.')
    print('난 조건이랑 상관없어')

인 경우에는 조건문 안에 들어있어서 print('난 조건이랑 상관없어')이 출력되지 않음

*** for 반복문

for i in range(6,10,2):
    print(i)

range()는 일종의 숫자 생성기
파이썬 2에서는 숫자를 배열에 바로 담아버리는 식
파이썬 3에서는 숫자를 하나씩 생성함
그래서 파이썬 2에서는 숫자가 너무 크면 뻗음
파이썬 3에 range()와 비슷한 게 파이썬 2의 xrange()

range(6) 0~6까지
range(6,10) 6부터 10까지
range(6,10,2) 6부터 10까지 2씩 상승

자료구조
리스트, 튜플, 셋, 딕셔너리

1. 리스트 : 순서가 있는 데이터의 모임
	데이터를 모아뒀고, 각 데이터는 순서로 구분 -> 인덱스
	[데이터,데이터,데이터]

2. 셋 : 순서가 없는 데이터의 모임
	구분이 안됩니다. 그러니 중복도 안됨
	{데이터,데이터,데이터}

3. 딕셔너리 : 이름이 있는 데이터의 모임
	데이터들이 모여있고 각 데이터는 이름으로 구분
	{키1:값1,키2:값2,키3:값3}

4. 튜플 : 변경불가능한 리스트
	(데이터,데이터,데이터)

***함수

def 함수이름 (매개변수1 , 매개변수2):
	문장1
	문장2
	return 반환값(반환할 값이 없으면 리턴을 빼도 됩니다.)

def get_sum(start, end):
    print('get_sum내부의 dir : ', dir())
    sum=0
    for i in range(start, end+1) :
        sum+=i
    return sum

print('바깥세상의 dir : ', dir())
print(get_sum(3,6))

바깥세상의 dir :  ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'get_sum']
get_sum내부의 dir :  ['end', 'start']
18

지역변수와 전역변수의 이름이 같을 경우?
함수 안에 있는건 지역적으로 이름공간을 만들어서 밖의 이름공간과 분리한다.
근데 함수 안에서 'global 이름'과 같은 형식으로 만들어져있다면, 바깥의 전역변수 이름공간을 가져온다.


***키워드 인수 & 디폴트 인수

print(1,2,3,4,5)
1 2 3 4 5
print(1,2,3,4,5, sep=',')
1,2,3,4,5
print(1,2,3,4,5, sep=',', end='?')
1,2,3,4,5?

***클래스

클래스는 변수와 기능의 모임으로 어떤 특정한 용도를 위해 사용자가 정의한 집단?

하나의 클래스로 묶인 함수들은 self 이름 공간이 있다. 자바의 This와 비슷함


***외부 라이브러리를 설치해보자
커맨드창에서 pip install 라이브러리 명
이렇게 하려면 Scripts까지 환경변수로 지정되어있어야합니다.
아니면 실제 경로로 들어가서 해야함.

pycharm에서 가상환경을 만들어서 라이브러리 버전을 달리 써보고싶으면
File-settings-project:??-project interpreter-톱니바퀴-showall-거기서 +표시-새로운 폴더 만들어서 지정-새로만든거로 OK하고
나와서 녹색+표시 눌러서 원하는 외부라이브러리 검색 후 install package하면 가상환경에 패키지가 설치된다.


****파이썬이랑 centos7연동하기 
이거 할려면 먼저
yum install -y https://centos7.iuscommunity.org/ius-release.rpm
로 먼저 yum에 쓸 수 있게 한다

yum search python35 로 설치할 수 있는지 확인한다.

yum install -y python35u python35u-libs python35u-devel python35u-pip 로 설치

python 쓰고 탭 눌러서 설치됐는지 확인

python3 쓰고 탭 눌러보고 python3.5 뜨면 그걸로 실행

pip도 똑같이 pip3 쓰고 탭 눌러보고 pip3.5로 실행


[root@s1 ~]# vi hello.py

print('hello world')
:wq

[root@s1 ~]# python3.5 hello.py

이렇게 실행을 시키기 위해 파이선을 앞에 실행해야함
그걸 안할라면 vi로 py 파일 안에 

#! /usr/bin/python3.5

print('hello world')
:wq

#! 부분을 넣어서 
[root@s1 ~]# ./hello.py
를 넣어주자