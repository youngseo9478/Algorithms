"100" %in% VData
mean(t)
order(t)
order(t,decreasing =T)
range(t)
sd(t) #aa 표준편
sort(aa) #ascending
sort(aa,decreasing =T)
range(t)
tmp<-c(1,2,3,4,5)
IQR(tmp)#3사분위와 1사분위간 범위 : 4-2=2
summary(aa2) # 요약정보
IQR(tmp)#3사분위와 1사분위간 범위 : 4-2=2
summary(aa2) # 요약정보
summary(tmp) # 요약정보
tmp<-c(1,2,3,4,5,6)
summary(tmp) # 요약정보
IQR(tmp)#3사분위와 1사분위간 범위 : 4-2=2
tmp<-c(1,2,3,4,500)
summary(tmp) # 요약정보
IQR(tmp)#3사분위와 1사분위간 범위 : 4-2=2
setequal(t,tv) # 같은집합?
union(t,tv) #합집합
intersect(t,tv) #곱집합
setdiff(t,tv) #차집합
setdiff(t,tv) #차집합
substring(t,1,3)
substring(t,1,3)
substring(t,1,2)
substring(t,1,2)
t
substring(t,1,2)
t
#sequence 연산자 : 사용
intvecl<- -3:3 #-3 부터 3사이의 정수를 Vector 데이터로
substring("ondal",1,3)
t
substring(t,1,2)
rev <- read.table("output.txt")
wordcount <- table(rev)
library(wordcloud)
library(RColorBrewer)
library(KoNLP)
wordcount_top <-head(sort(wordcount, decreasing = T),30)
wordcloud(names(wordcount_top), wordcount_top)
wordcount_top <-head(sort(wordcount, decreasing = T),60)
wordcloud(names(wordcount_top), wordcount_top)
rev <- read.table("output.txt")
rev<-gsub['^~!@#$%&*()_+=?<>']
wordcount <- table(rev)
wordcount_top <-head(sort(wordcount, decreasing = T),60)
wordcloud(names(wordcount_top), wordcount_top)
rev<-gsub['^']
rev<- gsub('[~!@#$%&*()_+=?<>^]','',rev)
wordcount <- table(rev)
wordcount_top <-head(sort(wordcount, decreasing = T),60)
wordcloud(names(wordcount_top), wordcount_top)
rev<- gsub('[~!@#$%&*()_+=?<>^]','',rev)
rev <- read.table("output.txt")
rev<- gsub('[~!@#$%&*()_+=?<>^]','',rev)
rev <- read.table("output.txt")
rev<-gsub['^','',rev]
rev<-gsub['[^]','',rev]
wordcount <- table(rev)
rev<-gsub['[^]','',rev]
wordcount_top <-head(sort(wordcount, decreasing = T),60)
wordcloud(names(wordcount_top), wordcount_top)
rev<-gsub['[^]','',rev]
rev<-gsub('[^]','',rev)
rev <- read.table("output.txt")
rev<-gsub('[^]','',rev)
rev<-gsub('^','',rev)
wordcount <- table(rev)
wordcount_top <-head(sort(wordcount, decreasing = T),60)
wordcloud(names(wordcount_top), wordcount_top)
wordcount_top <-head(sort(wordcount, decreasing = T),60)
wordcloud(names(wordcount_top), wordcount_top)
txt <- readLines("review.txt")
place <- sapply(txt, extractNoun, USE.NAMES = F)
c <- unlist(place)
c<- gsub('[~!@#$%&*()_+=?<>^]','',c)
c <- gsub('[ㄱ-ㅎ]','',c)
c<- gsub('(ㅜ|ㅠ)','',c)
c <- gsub("\\d+","",c)
place <- Filter( function(x) { nchar(x) >=2}, c)
write( unlist(place), "output.txt" )
rev <- read.table("output.txt")
wordcount <- table(rev)
wordcount <- table(rev)
wordcount_top <-head(sort(wordcount, decreasing = T),60)
wordcloud(names(wordcount_top), wordcount_top)
wordcloud(names(wordcount_top), wordcount_top,random.order = FALSE, random.color = TRUE, colors = palete)
palete <- brewer.pal(9, "Set1")
wordcloud(names(wordcount_top), wordcount_top, scale = c(2, 0.2), rot.per = 0.25, min.freq = 1,
random.order = FALSE, random.color = TRUE, colors = palete)
wordcloud(names(wordcount_top), wordcount_top, scale = c(2, 0.2), rot.per = 0.25, min.freq = 1,
random.order = FALSE, random.color = TRUE, colors = palete)
wordcloud(names(wordcount_top), wordcount_top, scale = c(2, 1), rot.per = 0.25, min.freq = 1,
random.order = FALSE, random.color = TRUE, colors = palete)
install.packages("igraph")
library(igraph)
library(igraph)
install.packages("igraph")
library(igraph)
TR2<-graph(c(1,2, 3,3, 3,4, 4,5, 2,8, 8,7, 7,3, 2,6, 6,7, 7,4, 4,3, 3,5, 2,4))
V(TR2)$name<-c("천호","강동구청","몽촌토성","잠실","석촌","송파","가락시장","문정")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
get.shortest.paths(TR2, from=1, to=3, mode="out")
TR2<-graph(c(1,2, 3,2, 3,4, 4,5, 2,8, 8,7, 7,3, 2,6, 6,7, 7,4, 4,3, 3,5, 2,4))
V(TR2)$name<-c("천호","강동구청","몽촌토성","잠실","석촌","송파","가락시장","문정")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
get.shortest.paths(TR2, from=1, to=3, mode="out")
TR2<-graph(c(1,2, 3,4, 4,5, 2,8, 8,7, 7,3, 2,6, 6,7, 7,4, 4,3, 3,5, 2,4))
V(TR2)$name<-c("천호","강동구청","몽촌토성","잠실","석촌","송파","가락시장","문정")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
get.shortest.paths(TR2, from=1, to=3, mode="out")
get.shortest.paths(TR2, from=1, to=3, mode="out")
get.shortest.paths(TR2, from=1, to=3, mode="out")
TR2<-graph(c(1,2, 2,3, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,11, 3,5, 2,4))
V(TR2)$name<-c("우리집","멍멍이","바둑이","누렁이")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
V(train)$name <- c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
degree(TR2, mode="in")
degree(TR2, mode="out")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
TR2<-graph(c(1,2, 2,3, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,11, 3,5, 2,4))
V(train)$name <- c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
get.shortest.paths(TR2, from=1, to=3, mode="out")
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
TR2<-graph(c(1,2, 2,3, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 3,5, 2,4))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
TR2<-graph(c(1,2, 2,3, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 11,4, 12,3, 13,10 14,1, 14,15))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
TR2<-graph(c(1,2, 2,3, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 11,4, 12,3, 13,10, 14,1, 14,15))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
TR2<-graph(c(1,2,2,1, 2,3,3,2, 15,14 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 11,4, 12,3, 13,10, 14,1, 14,15))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
get.shortest.paths(TR2, from=1, to=3, mode="out")
TR2<-graph(c(1,2,2,1, 2,3,3,2, 15,14, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 11,4, 12,3, 13,10, 14,1, 14,15))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
get.shortest.paths(TR2, from=1, to=3, mode="out")
TR2<-graph(c(1,2,2,1, 2,3,3,2, 14,115,14, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 11,4, 12,3, 13,10, 14,1, 14,15))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
get.shortest.paths(TR2, from=1, to=3, mode="out")
TR2<-graph(c(1,2,2,1, 2,3,3,2, 14,15,14, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 11,4, 12,3, 13,10, 14,1, 14,15))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
TR2<-graph(c(1,2,2,1, 2,3,3,2, 14,1 15,14, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 11,4, 12,3, 13,10, 14,1, 14,15))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
TR2<-graph(c(1,2,2,1, 2,3,3,2, 14,1, 15,14, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 11,4, 12,3, 13,10, 14,1, 14,15))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
get.shortest.paths(TR2, from=1, to=3, mode="out")
TR2<-graph(c(1,2,2,1, 2,3,3,2, 1,14, 15,14, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 11,4, 12,3, 13,10, 14,1, 14,15))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
get.shortest.paths(TR2, from=1, to=3, mode="out")
get.shortest.paths(TR2, from=6, to=15, mode="out")
get.shortest.paths(TR2, from=6, to=15, mode="out")
3
get.shortest.paths(TR2, from=1, to=3, mode="out")
get.shortest.paths(TR2, from=15, to=5, mode="out")
TR2<-graph(c(1,2,2,1,1,7 2,3,3,2, 1,14, 15,14, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 11,4, 12,3, 13,10, 14,1, 14,15))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="in")
degree(TR2, mode="out")
get.shortest.paths(TR2, from=15, to=5, mode="out")
TR2<-graph(c(1,2,2,1,1,7, 2,3,3,2, 1,14, 15,14, 3,4, 4,5, 6,7, 7,8, 8,9, 8,10, 9,10, 10,3, 11,4, 12,3, 13,10, 14,1, 14,15))
V(TR2)$name<-c("종각", "종로3가", "종로5가", "동대문",
"시청", "을지로입구", "을지로3가", "을지로4가", "동대문역사문화공원",
"서울역","회현", "명동", "충무로", "동대입구", "약수")
plot(TR2, layout=layout.kamada.kawai,
vertex.label=V(TR2)$name)
degree(TR2, mode="out")
get.shortest.paths(TR2, from=15, to=5, mode="out")
degree(TR2, mode="in")
get.shortest.paths(TR2, from=15, to=5, mode="out")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?cars
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
a <- sqldf('SELECT AVG(Sepal.Length) FROM iris')
a <- sqldf('SELECT AVG(Sepal_Length) FROM iris')
a <- sqldf('SELECT Sepal_Length FROM iris')
a <- sqldf('SELECT "Sepal_Length" FROM iris')
a
a <- sqldf('SELECT "Sepal.Length" FROM iris')
a
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
a <- sqldf('SELECT AVG("Sepal.Length") FROM iris')
a
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
.jinit(classpath = 'c:\\hive_jar')
drv <- JDBC('Driver class name')
conn <- dbConnect(drv, 'db url', 'username', 'password')
data <- dbGetQuery(conn, 'sql 문')
.jinit(classpath = 'c:\\hive_jar')
drv <- JDBC('Driver class name')
.jinit(classpath = 'c:\\hive_jar')
drv <- JDBC('Driver class name')
drv <- JDBC('org.apache.hive.jdbc.HiveDriver')
path <- list.files(path = c('C:\\hive_jar'),pattern ='jar', full.names=T)
.jinit(classpath = path)
drv <- JDBC('org.apache.hive.jdbc.HiveDriver')
conn <- dbConnect(drv, 'jdbc:hive2://192.168.111.201:10000', '', '')
data <- dbGetQuery(conn, 'SELECT * FROM dept')
path <- list.files(path = c('C:\\hive_jar'),pattern ='jar', full.names=T)
.jinit(classpath = path)
drv <- JDBC('org.apache.hive.jdbc.HiveDriver')
conn <- dbConnect(drv, 'jdbc:hive2://192.168.111.201:10000', '', '')
data <- dbGetQuery(conn, 'SELECT * FROM dept')
str(data)
?str
install.packages('Rserve')
library(Rserve)
Rserve(debug = F, port = 6311, args = '--no-save')
Rserve(debug = F, port = 6311, args = '--no-save')
mtcars
mcor <- cor(mtcars)
library(corrplot)
png('result.png')
corrplot(mcor)
dev.off()
install.packages("corrplot")
mtcars
mcor <- cor(mtcars)
library(corrplot)
png('result.png')
corrplot(mcor)
dev.off()
library(corrplot)
mtcars
mcor <- cor(mtcars)
library(corrplot)
png('result.png')
corrplot(mcor)
dev.off()
# 구글맵 패키기 인스톨
install.packages('ggmap')
library(ggmap)
cctv <- read.csv('C://R/_project_gangbuk_data.csv')
# str(cctv)
g_m <- get_map('"+gu+"gu',zoom=13,maptype = 'roadmap')
cctv.map <- ggmap(g_m) + geom_point(data = cctv, aes(x=LON, y=LAT),
size = 2, alpha = 0.7, color = '#980000')
cctv.map
# str(cctv)
g_m <- get_map('gangbukgu',zoom=13,maptype = 'roadmap')
cctv.map <- ggmap(g_m) + geom_point(data = cctv, aes(x=LON, y=LAT),
size = 2, alpha = 0.7, color = '#980000')
cctv.map
ggsave(file='map_result.png')
# Rserve(debug = F, port = 6311, args = '--no-save')
Rserve(debug = F, port = 6314, args = '--RS-encoding utf-8 --no save --encoding utf8 --RS-enable-remote')
# Rserve(debug = F, port = 6311, args = '--no-save')
Rserve(debug = F, port = 6314, args = '--RS-encoding utf-8 --no save --encoding utf8 --RS-enable-remote')
# Rserve(debug = F, port = 6311, args = '--no-save')
Rserve(debug = F, port = 7002, args = '--RS-encoding utf-8 --no-save --encoding utf8 --RS-enable-remote')
?sample
sample(2,nrow(iris), replace = T, prob = c(0.7,0.3))
ind <- sample(2,nrow(iris), replace = T, prob = c(0.7,0.3))
ind
trainData <- iris[ind==1,]
testData <- iris[ ind==2,]
trainData
testData
str(iris)
install.packages("party")
library(party)
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length
iris_ctree <- ctree(myFormula,data = trainData)
iris_ctree
plot(iris_ctree, type="simple")
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula,data = trainData)
iris_ctree
plot(iris_ctree, type="simple")
testPred <-predict(iris_ctree,newdata=testData)
testPred
testData$Species
result<-data.frame(pred=testPred,real=testData$Species)
table(result)
iris
?survey
?xtabs
xtabs(~Sex+Exer,data=survey)
library(MASS)
data(survey)
str(survey)
xtabs(~Sex+Exer,data=survey)
# Exer
# Sex      Freq None Some
# Female   49   11   58
# Male     65   13   40
# 기대 빈도에 비해 어느정도 한쪽으로 치우쳐있는지 ...
# 연관 종속성을 알려면 카이제곱검정.....을 이용한다고 한다 ^^
chisq.test(xtabs(~Sex+Exer,data=survey))
# 이 검정을 이용해서 타이타닉 생존자에 대해 조사해보려고 함
data < - read.csv('titanic_train.csv')
# 이 검정을 이용해서 타이타닉 생존자에 대해 조사해보려고 함
data <- read.csv('titanic_train.csv')
# 0이면 죽은 것
str(data)
?data
chisq.test(xtabs(~Survivied+Sex,data=data))
chisq.test(xtabs(~Survived+Sex,data=data))
chisq.test(xtabs(~Survived+Pclass,data = data))
data$Fare
fivenum(data$Fare)
data$FareGroup <- ifelse(data$Fare<10,1,ifelse(data$Fare<20,2,ifelse(data$Fare)<30,3,ifelse(data$Fare)<100,4,5)) #10보다 작으면 1,아니면 2
table(data$FareGroup)
data$FareGroup <- ifelse(data$Fare<10,1,ifelse(data$Fare<20,2,ifelse(data$Fare)<30,3,4) #10보다 작으면 1,아니면 2
data$FareGroup <- ifelse(data$Fare<10,1,ifelse(data$Fare<20,2,ifelse(data$Fare)<30,3,4) #10보다 작으면 1,아니면 2
table(data$FareGroup)
data$FareGroup <- ifelse(data$Fare<10,1,ifelse(data$Fare<20,2,ifelse(data$Fare)<30,3,4)
# [1]   0.0000   7.9104  14.4542  31.0000 512.3292  제일 비싸게 주고 탄 사람이 512
chisq.test(xtabs(~Survived+FareGroup,data = data))
data$FareGroup <- ifelse(data$Fare<10,1,ifelse(data$Fare<20,2,ifelse(data$Fare)<30,3,4)
#10보다 작으면 1,아니면 2
table(data$FareGroup)
chisq.test(xtabs(~Survived+FareGroup,data = data))
data$FareGroup <- ifelse(data$Fare<10,1,ifelse(data$Fare<20,2,ifelse(data$Fare)<30,3,4)
chisq.test(xtabs(~Survived+FareGroup,data = data))
data$FareGroup <- ifelse(data$Fare<10,1,ifelse(data$Fare<20,2,ifelse(data$Fare)<30,3,4)
chisq.test(xtabs(~Survived+FareGroup,data = data))
data$FareGroup <- ifelse(data$Fare<10,1,ifelse(data$Fare<20,2,ifelse(data$Fare)<30,3,4)
chisq.test(xtabs(~Survived+FareGroup,data = data))
data$Age <-ifelse(is.na(data$Age),mean(data$Age,na.rm = T),data$Age)
data$Age
# 나이 정보가 없는 사람은 평균값으로 대체
d<-c(1,3,4,NA)
mean(d,na.rm = T)
mean(d)
# 데이터 중에 NA가 있으면 평균값을 구할 수 없다.
d<-c(1,3,4,NA)
mean(d)
# > d<-c(1,3,4,NA)
# > mean(d)
# [1] NA
mean(d,na.rm = T)
data$FareGroup <- ifelse(data$Fare<10,1,ifelse(data$Fare<20,2,ifelse(data$Fare<30,3,4)))
chisq.test(xtabs(~Survived+FareGroup,data = data))
fivenum(data$Age)
data$AgeGroup <- ifelse(data$Age<10,1,ifelse(data$Age<20,2,ifelse(data$Age<30,3,ifelse(data$Age<60,4,5))))
table(data$AgeGroup)
# 1   2   3   4   5
# 62 102 397 304  26
chisq.test(xtabs(~Survived+AgeGroup,data=data))
str(data)
chisq.test(xtabs(~Survived+Parch,data=data)) #Parch는 자식 수
# Warning message:
#   In chisq.test(xtabs(~Survived + Parch, data = data)) :
#   카이제곱 approximation은 정확하지 않을수도 있습니다
#  데이터가 적어서 신뢰할 수 없다는 뜻
table(data$Parch)
install.packages('caret')
library(caret)
?caret
?createDataPartition
createDataPartition(data$Survived,p=0.7)
createDataPartition(data$Survived,p=0.7)[[1]]
data.train <- data[train.id]
data.train <- data[train.id,]
data.test <- data[-train.id,]
# createDataPartition(data$Survived,p=0.7)[[1]]
train.id <- createDataPartition(data$Survived,p=0.7)[[i]]
# createDataPartition(data$Survived,p=0.7)[[1]]
train.id <- createDataPartition(data$Survived,p=0.7)[[1]]
data.train <- data[train.id,]
data.test <- data[-train.id,]
?glm
glm(Survived~., family = binomial(link="logit"),data = data)  #싹 다는 .
data$Ticket<-NULL
data$Cabin<-NULL
data$Embarked<-NULL
data$PassengerId<-NULL
glm(Survived~., family = binomial(link="logit"),data = data)  #싹 다는 .
str(data)
str(data)
data$Ticket<-NULL
data$Cabin<-NULL
data$Embarked<-NULL
data$PassengerId<-NULL
# createDataPartition(data$Survived,p=0.7)[[1]]
train.id <- createDataPartition(data$Survived,p=0.7)[[1]]
data.train <- data[train.id,]  #70%
data.test <- data[-train.id,]  #30%
glm(Survived~., family = binomial(link="logit"),data = data)  #싹 다는 .
# Warning message:
#   glm.fit: 알고리즘이 수렴하지 않았습니다
#  티켓이 NA가 너무 많고 캐빈은 필요도 없음 이 데이터들은 지우고 합시다
#  그래서 위에서 필요없는 데이터들에 널 넣어서 없애줬다
summary(logit.model)
logit.model <-glm(Survived~., family = binomial(link="logit"),data = data)  #싹 다는 .
summary(logit.model)
data$Ticket<-NULL
data$Cabin<-NULL
data$Embarked<-NULL
data$PassengerId<-NULL
library(caret)
train.id <- createDataPartition(data$Survived,p=0.7)[[1]]
data.train <- data[train.id,]  #70%
data.test <- data[-train.id,]  #30%
logit.model <-glm(Survived~., family = binomial(link="logit"),data = data)  #싹 다는 .
install.packages('Rserve')
install.packages("plotrix")
install.packages('ggmap')
install.packages("ggmap")
install.packages("ggmap")
install.packages("ggmap")
install.packages('ggmap')
install.packages('Rserve')
install.packages("plotrix")
install.packages('ggmap')
install.packages("ggmap")
install.packages("devtools")
devtools::install_github("cardiomoon/Kormaps")
library(Rserve)
Rserve(debug = F, port=7777, args='--RS-encoding utf8 --no-save --encoding utf8 --RS-enable-remote')
Rserve(debug = F, port=4321, args='--RS-encoding utf8 --no-save --encoding utf8 --RS-enable-remote')
Rserve(debug = F, port=4321, args='--RS-encoding utf8 --no-save --encoding utf8 --RS-enable-remote')
