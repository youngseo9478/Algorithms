<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user">

	<select id="userlist" resultType="com.my.biz.user.vo.UserVO">
		SELECT * FROM USERS
	</select>
	<select id="userlogin" resultType="uservo" parameterType="uservo">
		select
		* from users where id =#{id} and pw = #{pw}
	</select>
	<insert id="useradd" parameterType="uservo"> <!-- uservo객체에 물음표에 들어갈 데이터 가져오겠다는 것 -->
		insert into users (id,pw,name,role)
		values(#{id},#{pw},#{name},#{role}) <!-- ?에 getId맵핑되는 것 같이 동작함 -->
	</insert>
	<insert id="useradd2" parameterType="uservo"> 
		insert into users (id,pw,name,role)
		values('${id}','${pw}','${name}','${role}') <!-- statement로 문장에 바로 들어감 (?에들어가는거x)-->
	</insert>
	<select id="userget" resultType="uservo"><!-- config파일 안에서 alias시켜놔서 이렇게도 
			가능 -->
		select * from users where id = #{id}
		<!-- parameterType안쓰는 이유는 파라미터가 1개라서! 이경우는 getId처럼동작하는게 아니라 그냥 넘어온 파라미터 
			한개를 가져다 박는 것. 그래서 이름 달라도 상관없다. -->
	</select>
	<delete id="userdel"> <!-- 물음표가 하나인 경우에는 동적바인딩 가능 -->
		delete from users where id = #{id}
	</delete>
	<update id="userupdate" parameterType="uservo">
		update users set pw =
		#{pw}, name = #{name} where id = #{id}
	</update>
	<select id="usersearch" resultType="uservo" parameterType="hashMap">
		select * from users
		<where>
			<if test="name != null">name like '%'||#{name}||'%'</if> <!-- get(name)하면 대응되는 값 나오니까 -->
			<if test="id != null">id like '%'||#{id}||'%'</if>
			<if test="role != null">role like '%'||#{role}||'%'</if>
		</where>
		<!-- 혹은
		select * from users where ${condition} (''이거안붙임!) like '%'||#{keyword}||'%'-->
	</select>
		
<!-- 		select * from users where 1=1 (항상 참이되는 조건하고 and로 뒤에 문장을 if문장으로 나눠서 넣어주기도 함) 
			<if test="name != null"> and name like '%'||#{name}||'%'</if> get(name)하면 대응되는 값 나오니까
			<if test="id != null"> and id like '%'||#{id}||'%'</if>
			<if test="role != null"> and role like '%'||#{role}||'%'</if>-->

</mapper>
