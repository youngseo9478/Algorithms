<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<context:component-scan base-package="com.my.biz.*"></context:component-scan>
	
	<!-- annotation 기반 AOP -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe"></property>
		<property name="username" value="youngseo"></property>
		<property name="password" value="1234"></property>
	</bean>	


	<!-- MaBatis 연동 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean"></constructor-arg>
	</bean>
 	<!-- <bean id="userMybatis" class="com.my.biz.user.dao.UserDAO_MyBatis">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean>
	<bean id="userMybatis2" class="com.my.biz.user.dao.UserDAO_MyBatis_Interface"
							init-method="init">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean>
	<bean id="boardMybatis" class="com.my.biz.board.dao.BoardDAO_MyBatis"
							p:mybatis-ref="sqlSession">
	</bean> 
	<bean id="boardMybatis2" class="com.my.biz.board.dao.BoardDAO_MyBatis_Interface"
							init-method="init">
	</bean>
 -->
	

	
	<!-- Spring JDBC 연동 JdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" 
										c:dataSource-ref="dataSource">
	</bean>
	
	<!-- Message 관리 빈 등록 -->
	<bean id="messageSource"
		  class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>messages.message</value>
			</list>
		</property>
	</bean>
	
	<!-- <bean id="userSpring" class="com.my.biz.user.dao.UserDAO_Spring">
		<constructor-arg ref="jdbcTemplate"></constructor-arg>
	</bean>
	
	<bean id="boardSpring" class="com.my.biz.board.dao.BoardDAO_Spring">
		<constructor-arg ref="jdbcTemplate"></constructor-arg>
	</bean>	 -->

	
	<!-- JDBC 연동 -->
	<!-- <bean id="userJdbc" class="com.my.biz.user.dao.UserDAO_JDBC"></bean>
	
	<bean id="boardJdbc" class="com.my.biz.board.dao.BoardDAO_JDBC"></bean>
 -->
	
	<!-- Service -->
	<!-- <bean id="userService" class="com.my.biz.user.service.UserServiceImpl">
		<constructor-arg ref="userJdbc"></constructor-arg>
		<constructor-arg ref="userSpring"></constructor-arg>
		<constructor-arg ref="userMybatis"></constructor-arg>
		<constructor-arg ref="userMybatis2"></constructor-arg>
	</bean> -->
	
	<!-- <bean id="boardService" class="com.my.biz.board.service.BoardServiceImpl">
		<constructor-arg ref="boardJdbc"></constructor-arg>
		<constructor-arg ref="boardSpring"></constructor-arg>
		<constructor-arg ref="boardMybatis"/>
		<constructor-arg ref="boardMybatis2"></constructor-arg>
	</bean> -->
	
	
	<!-- AOP -->
	<!--
	<bean id="logAdvice" class="com.my.biz.comm.LogAdvice"></bean>
	<aop:config>
		<aop:pointcut id="pp" 
			expression="execution(* com.my.biz.user.service.UserService.get*(..))" />
		<aop:pointcut id="pp2" 
			expression="execution(* com.my.biz.user.service.UserService.login(..))" />
		<aop:aspect ref="logAdvice">
			
			<aop:before method="log" pointcut-ref="pp2"/>
			<aop:after-throwing method="log_ex" pointcut-ref="pp2" throwing="ex"/>			
			<aop:after-returning method="log_return" pointcut-ref="pp2" returning="obj"/>
			<aop:after method="log_after" pointcut-ref="pp2"/>			
			 
			<aop:around method="log_around" pointcut-ref="pp2"/>			
		</aop:aspect>
	</aop:config>
	-->
</beans>
